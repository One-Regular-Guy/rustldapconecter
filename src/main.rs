use std::{env, fmt::Debug, io::BufReader, sync::Arc};

use axum::{routing::post, Router};
use ldap3::LdapConnAsync;

pub mod service;
pub mod handler;
pub mod models;
use rcgen::{Certificate, CertificateParams, Issuer, KeyPair};
use service::ldap_service::LdapService;

use crate::handler::setall_handler::handler;

#[tokio::main]
async fn main() {
    tracing_subscriber::fmt()
        .with_env_filter("info,rustapi=debug")
        .init();
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    //                         Pegando Variaveis de Ambiente
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    let addr = match env::var("BIND") {
        Ok(uri) => uri,
        Err(_) => "0.0.0.0:3000".to_string(),
    };

    let ldap_uri = match env::var("LDAP_URI") {
        Ok(uri) => uri,
        Err(_) => "ldap://localhost:389".to_string(),
    };
    
    let base_dn = match env::var("BASE_DN") {
        Ok(value) => value,
        Err(_) => "ou=accounts,dc=domain,dc=com".to_string(),
    };

    let ca_cert_pem = env::var("CA_CART").unwrap();
    let ca_key_pem = env::var("CA_KEY").unwrap();
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    //                                      Dependecies
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    let ca_key_pair = KeyPair::from_pem(&ca_key_pem).unwrap();
    let cert = ;
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    //                                      Conexões
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    let  (conn, ldap) = LdapConnAsync::new(&ldap_uri)
        .await
        .unwrap();
    ldap3::drive!(conn);
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    //                                      Serviços
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    let ldap_service = LdapService::new(ldap, Arc::new(base_dn));
    
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    //                                      Rotas
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    let get_route: Router<LdapService> = axum::Router::new()
        .route("/get", post(handler));
    
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    //                              Juntar Rotas e Escutar
    // ========================================================================================
    // ----------------------------------------------------------------------------------------
    // ========================================================================================
    let routes: Router<LdapService> = Router::new()
        .nest("/api", get_route);
    let app: Router = Router::new()
        .merge(routes)
        .with_state(ldap_service);
    let listener = tokio::net::TcpListener::bind(addr)
        .await
        .unwrap();
    axum::serve(listener, app)
    .await
    .unwrap()
}
